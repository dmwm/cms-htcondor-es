input{
    beats {
        port => 5044
        client_inactivity_timeout => 300
    }
}
filter{
    if [message] =~ "SCHEMA_VALIDATOR: unknown key=.*" {
        drop { }
    }

    grok{
        match => {
            "message" => "%{TIMESTAMP_ISO8601:timestamp} : %{WORD:log-source}:%{LOGLEVEL:log-level} - %{GREEDYDATA:message}"
        }
        overwrite => ["message"]
    }

    grok{
        patterns_dir => ["/home/stiegerb/logstash/config/patterns/"]
        match => {
            "message" => "Schedd %{SCHEDDNAME:schedd_name}%{SPACE}history: response count:%{SPACE}%{NONNEGINT:response_count}; last completion %{DATA}; query time %{BASE10NUM:query_time} min%{GREEDYDATA}"
        }
        add_field => {"message_type" => "history_schedd_response"}
        overwrite => ["message"]
    }

    grok{
        patterns_dir => ["/home/stiegerb/logstash/config/patterns/"]
        match => {
            "message" => "Schedd %{SCHEDDNAME:schedd_name}%{SPACE}queue: response count:%{SPACE}%{NONNEGINT:response_count}; query time %{BASE10NUM:query_time} min;"
        }
        add_field => {"message_type" => "queue_schedd_response"}
        overwrite => ["message"]
    }

    grok{
        match => {
            "message" => "Processing time for queues: %{BASE10NUM:queue_processing_time} mins, %{NONNEGINT:total_sent}/%{NONNEGINT:total_received} docs sent in %{BASE10NUM:total_upload_time} min of total upload time"
        }
        add_field => {"message_type" => "queue_end"}
        overwrite => ["message"]
    }

    grok{
        match => {
            "message" => "Processing time for history: %{BASE10NUM:history_processing_time} mins"
        }
        add_field => {"message_type" => "history_end"}
        overwrite => ["message"]
    }

    grok{
        match => {
            "message" => "Failed to index %{POSINT:n_failed_to_index} documents to ES: %{GREEDYDATA:es_error_message}"
        }
        add_field => {"message_type" => "es_failed_to_index"}
        overwrite => ["message"]
    }

    grok{
        patterns_dir => ["/home/stiegerb/logstash/config/patterns/"]
        match => {
            "message" => "Failed to query schedd for job history: %{SCHEDDNAME:schedd_name}"
        }
        add_field => {"message_type" => "failed_to_query"}
        overwrite => ["message"]
    }

    grok{
        patterns_dir => ["/home/stiegerb/logstash/config/patterns/"]
        match => {
            "message" => "Failure when processing schedd history query on %{SCHEDDNAME:schedd_name}: %{GREEDYDATA:error_message}"
        }
        add_field => {"message_type" => "failed_to_process_history"}
        overwrite => ["message"]
    }

    grok{
        patterns_dir => ["/home/stiegerb/logstash/config/patterns/"]
        match => {
            "message" => "Failed to query schedd %{SCHEDDNAME:schedd_name} for jobs: %{GREEDYDATA:error_message}"
        }
        add_field => {"message_type" => "failed_to_query"}
        overwrite => ["message"]
    }

    grok{
        patterns_dir => ["/home/stiegerb/logstash/config/patterns/"]
        match => {
            "message" => "Failure when converting document on %{SCHEDDNAME:schedd_name} history: %{GREEDYDATA:error_message}"
        }
        add_field => {"message_type" => "failed_to_convert"}
        overwrite => ["message"]
    }

    grok{
        patterns_dir => ["/home/stiegerb/logstash/config/patterns/"]
        match => {
            "message" => "Schedd %{SCHEDDNAME:schedd_name} history timed out; ignoring progress."
        }
        add_field => {"message_type" => "schedd_history_timeout"}
        overwrite => ["message"]
    }

    grok{
        patterns_dir => ["/home/stiegerb/logstash/config/patterns/"]
        match => {
            "message" => "Queue crawler on %{SCHEDDNAME:schedd_name} has been running for more than %{NONNEGINT:timelimit} minutes; exiting"
        }
        add_field => {"message_type" => "schedd_queue_outoftime"}
        overwrite => ["message"]
    }

    grok{
        patterns_dir => ["/home/stiegerb/logstash/config/patterns/"]
        match => {
            "message" => "No time remaining to run queue crawler on %{SCHEDDNAME:schedd_name}; exiting."
        }
        add_field => {"message_type" => "schedd_queue_nostart"}
        overwrite => ["message"]
    }

    grok{
        patterns_dir => ["/home/stiegerb/logstash/config/patterns/"]
        match => {
            "message" => "Schedd %{SCHEDDNAME:schedd_name} queue timed out; ignoring progress."
        }
        add_field => {"message_type" => "schedd_queue_timeout"}
        overwrite => ["message"]
    }

    grok{
        match => {
            "message" => "Closing listener, received %{POSINT:listener_total_received} documents total"
        }
        add_field => {"message_type" => "listener_end"}
        overwrite => ["message"]
    }

    grok{
        match => {
            "message" => "ConnectionTimeout: ConnectionTimeout caused by - %{GREEDYDATA:es_error_message}"
        }
        add_field => {"message_type" => "es_timeout_error"}
        overwrite => ["message"]
    }

    grok{
        match => {
            "message" => "Successfully loaded local schema %{DATA:validation_schema} for validation"
        }
        add_field => {"message_type" => "load_local_validation_schema"}
        overwrite => ["message"]
    }

    grok{
        match => {
            "message" => "Local schema %{DATA:validation_schema} is not json compliant"
        }
        add_field => {"message_type" => "invalid_local_validation"}
        overwrite => ["message"]
    }

    grok{
        match => {
            "message" => "Schema not found: %{QS:validation_schema}"
        }
        add_field => {"message_type" => "validation_schema_not_found"}
        overwrite => ["message"]
    }

    grok{
        match => {
            "message" => "Document %{DATA:globaljobid} contains keys not present in schema %{QS:schema}"
        }
        add_field => {"message_type" => "validation_fail_unknown_key"}
        overwrite => ["message"]
    }

    grok{
        match => {
            "message" => "Document %{DATA:globaljobid} conflicts with schema %{QS:schema}"
        }
        add_field => {"message_type" => "validation_fail_conflict"}
        overwrite => ["message"]
    }

    grok{
        match => {
            "message" => "SCHEMA_VALIDATOR: unknown key=%{DATA:unknown_key}, val=%{GREEDYDATA:unknown_key_value}"
        }
        add_field => {"message_type" => "validator_unknown_key"}
        overwrite => ["message"]
    }

    grok{
        match => {
            "message" => "SCHEMA_VALIDATOR: for sub schema=%{DATA} val=%{DATA} has wrong data-types"
        }
        add_field => {"message_type" => "validator_invalid_nested"}
        overwrite => ["message"]
    }

    grok{
        match => {
            "message" => "SCHEMA_VALIDATOR: for key=%{DATA:offending_key} val=%{DATA:offending_value} has inconsistent data-types"
        }
        add_field => {"message_type" => "validator_inconsistent_list"}
        overwrite => ["message"]
    }

    grok{
        match => {
            "message" => "SCHEMA_VALIDATOR: for key=%{DATA:offending_key} val=%{DATA:offending_value} has incorrect data-type in list, found %{DATA} expect %{DATA}"
        }
        add_field => {"message_type" => "validator_incorrect_type_in_list"}
        overwrite => ["message"]
    }

    grok{
        match => {
            "message" => "SCHEMA_VALIDATOR: for key=%{DATA:offending_key} val=%{DATA:offending_value} has incorrect data-type, found %{DATA} expect %{DATA}"
        }
        add_field => {"message_type" => "validator_incorrect_type"}
        overwrite => ["message"]
    }

    grok{
        match => {
            "message" => "Bunching records for AMQP in sizes of %{NONNEGINT:amq_bunch_size}"
        }
        add_field => {"message_type" => "amq_bunching"}
        overwrite => ["message"]
    }

    grok{
        match => {
            "message" => "\&\&\& There are %{POSINT:n_schedds} schedds to query."
        }
        add_field => {"message_type" => "script_start"}
        overwrite => ["message"]
    }

    grok{
        match => {
            "message" => "@@@ Total processing time: %{BASE10NUM:total_processing_time} mins"
        }
        add_field => {"message_type" => "script_end"}
        overwrite => ["message"]
    }

    grok{
        match => {
            "message" => "Number of queried docs not equal to number of processed docs."
        }
        add_field => {"message_type" => "inconsistent_doc_number"}
        overwrite => ["message"]
    }

    grok{
        match => {
            "message" => "Closing listener before all schedds were processed"
        }
        add_field => {"message_type" => "listener_premature_close"}
        overwrite => ["message"]
    }

    grok{
        match => {
            "message" => "Listener did not shut down properly; terminating."
        }
        add_field => {"message_type" => "listener_abort"}
        overwrite => ["message"]
    }

    date {
        match => ["timestamp", "ISO8601"]
        remove_field => ["timestamp"]
    }
}

output {
    opensearch {
        hosts           => "https://es-cms1.cern.ch:443/es"
        index           => "logmon-spider-%{+YYYY-MM-dd}"
        cacert          => "/etc/pki/tls/certs/CERN-bundle.pem"
        ssl             => true
        manage_template => false
        user            => "logmon-spider"
        password        => "<password>"
    }
}
